!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=30)}([function(e,t){e.exports=require("@emotion/core")},function(e,t){e.exports=require("react")},function(e,t){e.exports=require("@babel/runtime/helpers/slicedToArray")},function(e,t){e.exports=require("react-router-dom")},function(e,t){e.exports=require("react-redux")},function(e,t){e.exports=require("axios")},function(e,t){e.exports=require("@emotion/styled-base")},function(e,t){e.exports=require("@babel/runtime/regenerator")},function(e,t){e.exports=require("prop-types")},function(e,t){e.exports=require("react-router-config")},function(e,t){e.exports=require("@babel/runtime/helpers/asyncToGenerator")},function(e,t){e.exports=require("redux")},function(e,t){e.exports=require("@babel/runtime/helpers/classCallCheck")},function(e,t){e.exports=require("@babel/runtime/helpers/createClass")},function(e,t){e.exports=require("@babel/runtime/helpers/possibleConstructorReturn")},function(e,t){e.exports=require("@babel/runtime/helpers/getPrototypeOf")},function(e,t){e.exports=require("@babel/runtime/helpers/inherits")},function(e,t){e.exports=require("@babel/runtime/helpers/defineProperty")},function(e,t){e.exports=require("express")},function(e,t){e.exports=require("redux-persist")},function(e,t){e.exports=require("moment")},function(e,t){e.exports=require("redux-persist-cookie-storage")},function(e,t){e.exports=require("cookies")},function(e,t){e.exports=require("redux-devtools-extension")},function(e,t){e.exports=require("redux-thunk")},function(e,t){e.exports=require("react-dom/server")},function(e,t){e.exports=require("serialize-javascript")},function(e,t){e.exports=require("redux-persist/lib/integration/react")},function(e,t){e.exports=require("domain")},function(e,t){e.exports=require("redux-persist-transform-encrypt")},function(e,t,n){"use strict";n.r(t);var r=n(7),o=n.n(r),a=n(10),i=n.n(a),c=n(1),s=n(18),l=n.n(s),u=n(9),p=n(4),j=n(11),b=n(23),m=n(24),x=n.n(m),d=n(25),f=n.n(d),O=n(3),g=n(26),h=n.n(g),v=n(19),y=(n(27),n(21)),k=n(22),w=n.n(k),S=n(12),C=n.n(S),L=n(13),P=n.n(L),q=n(14),T=n.n(q),D=n(15),E=n.n(D),M=n(16),F=n.n(M),R=n(6),_=n.n(R),N=n(5),A=n.n(N),W=n(20),I=n.n(W),B=n(0);var H=_()("div",{target:"e1pc2kf40",label:"BoxContainerStyled"})({name:"p58oka",styles:"display:flex;flex-direction:row;flex-wrap:wrap;"}),X=_()("div",{target:"e1pc2kf41",label:"BoxItemStyled"})({name:"1hbecse",styles:"color:black;border-radius:4px;box-shadow:2px 4px #898989;margin:5px;width:200px;height:200px;padding:10px;flex-grow:1;background-color:#ffff;a{text-decoration:none;color:inherit;}p{font-size:12px;}"}),z=function(e){function t(e){var n;return C()(this,t),(n=T()(this,E()(t).call(this,e))).state={activeMeetings:null},n}return F()(t,e),P()(t,[{key:"componentDidMount",value:function(){var e=this,t=this.props.token;A()({headers:{"X-Requested-With":"XMLHttpRequest",Authorization:"JWT ".concat(t)},url:"http://localhost:8000/meetings/active/",method:"GET"}).then((function(t){var n=t.data.meetings;e.setState({activeMeetings:n})})).catch((function(e){console.log(e)}))}},{key:"render",value:function(){console.log("in meeting active");var e=this.state.activeMeetings;return Object(B.jsx)(c.Fragment,null,e&&Object(B.jsx)(H,null,e.map((function(e){var t=e.meeting_uuid,n=e.start_date,r=e.meeting_template;return Object(B.jsx)(X,null,Object(B.jsx)(O.Link,{to:"/meeting/preview/".concat(t,"/")},r.name),Object(B.jsx)("p",null,"Description: ".concat(r.description)),Object(B.jsx)("p",null,"Start Date: ".concat(I()(n).format("MMMM Do YYYY, h:mm:ss a"))))}))),!e&&Object(B.jsx)("p",null," No Active Meetings"))}}]),t}(c.Component),U=Object(p.connect)((function(e){return{token:e.reducer.user.token}}),null)(z),Y=function(){return Object(B.jsx)("header",null,Object(B.jsx)("h1",null," Your Meetings: "),Object(B.jsx)(U,null),Object(B.jsx)("h1",null," Create a New Meeting: "),Object(B.jsx)("h1",null," Trending Templates: "),Object(B.jsx)("p",null," No Active Templates"))},G=n(2),J=n.n(G),K=n(8),Q=n.n(K);function V(e){return console.log(e),{type:"SET_TOKEN",value:e}}var Z={};Z.UlElement=_()("ul",{target:"e15t2dwo0"})({name:"jfjb73",styles:"max-width:800px;margin:0 auto;list-style-type:none;padding:0;"}),Z.FlexList=_()("ul",{target:"e15t2dwo1"})({name:"39htxe",styles:"list-style-type:none;padding:0;display:flex;flex-wrap:wrap;align-items:center;padding:0 8px;flex:1 0 220px;li{width:100px;}"}),Z.ListElement=_()("li",{target:"e15t2dwo2"})({name:"1fsmdt9",styles:"display:flex;flex-wrap:wrap;align-items:center;label,p{padding:8px;font-weight:300;letter-spacing:0.09em;text-transform:uppercase;flex:1 0 120px;max-width:220px;}"}),Z.ButtonElement=_()("button",{target:"e15t2dwo3"})({name:"wz5jyj",styles:"padding:8px 16px;border:none;background:#333;color:#f2f2f2;text-transform:uppercase;letter-spacing:0.09em;border-radius:2px;"});var $=Z,ee=function(e){var t=Object(c.useState)(""),n=J()(t,2),r=n[0],o=n[1],a=Object(c.useState)(""),i=J()(a,2),s=i[0],l=i[1];return Object(B.jsx)(c.Fragment,null,Object(B.jsx)("h1",null," Login "),Object(B.jsx)($.UlElement,null,Object(B.jsx)($.ListElement,null,Object(B.jsx)("label",{htmlFor:"email"},"Email"),Object(B.jsx)("input",{type:"text",name:"email",value:r,onChange:function(e){return o(e.target.value)}})),Object(B.jsx)($.ListElement,null,Object(B.jsx)("label",{htmlFor:"password"},"Password"),Object(B.jsx)("input",{type:"password",name:"password",value:s,onChange:function(e){return l(e.target.value)}})),Object(B.jsx)($.ButtonElement,{onClick:function(){return t="".concat("http://localhost:8000","/users/token-auth/"),(n=new FormData).append("email",r),n.append("password",s),void A()({headers:{"X-Requested-With":"XMLHttpRequest"},url:t,method:"POST",data:n}).then((function(t){var n=t.data.token;e.setTokenAction(n)})).catch((function(e){console.log(e)}));var t,n}}," Login ")))};ee.propTypes={setToken:Q.a.func},ee.defaultProps={setToken:null};var te=Object(p.connect)(null,(function(e){return{setTokenAction:function(t){return e(V(t))}}}))(ee),ne=(n(28),function(e){var t=e.setToken,n=Object(c.useState)(""),r=J()(n,2),o=r[0],a=r[1],i=Object(c.useState)(""),s=J()(i,2),l=s[0],u=s[1],p=Object(c.useState)(""),j=J()(p,2),b=j[0],m=j[1],x=Object(c.useState)(""),d=J()(x,2),f=d[0],O=d[1],g=Object(c.useState)(""),h=J()(g,2),v=h[0],y=h[1],k=Object(c.useState)(""),w=J()(k,2),S=w[0],C=w[1];return console.log("".concat("http://localhost:8000","/users/register/")),Object(B.jsx)(c.Fragment,null,Object(B.jsx)("h1",null," Registration "),Object(B.jsx)($.ListElement,null,Object(B.jsx)("label",{htmlFor:"first-name"},"First Name"),Object(B.jsx)("input",{type:"text",name:"first-name",value:o,onChange:function(e){return a(e.target.value)}})),Object(B.jsx)($.ListElement,null,Object(B.jsx)("label",{htmlFor:"last-name"},"Last Name"),Object(B.jsx)("input",{type:"text",name:"last-name",value:l,onChange:function(e){return u(e.target.value)}})),Object(B.jsx)($.ListElement,null,Object(B.jsx)("label",{htmlFor:"phone-number"},"Phone number"),Object(B.jsx)("input",{type:"text",name:"phone-number",value:f,onChange:function(e){return O(e.target.value)}})),Object(B.jsx)($.ListElement,null,Object(B.jsx)("label",{htmlFor:"date-of-birth"},"Date of Birth"),Object(B.jsx)("input",{type:"date",name:"date-of-birth",value:b,onChange:function(e){return m(e.target.value)}})),Object(B.jsx)($.ListElement,null,Object(B.jsx)("label",{htmlFor:"email"},"Email"),Object(B.jsx)("input",{type:"email",name:"email",value:v,onChange:function(e){return y(e.target.value)}})),Object(B.jsx)($.ListElement,null,Object(B.jsx)("label",{htmlFor:"email"},"Password"),Object(B.jsx)("input",{type:"password",name:"password",value:S,onChange:function(e){return C(e.target.value)}})),Object(B.jsx)($.ButtonElement,{onClick:function(){return e="".concat("http://localhost:8000","/users/register/"),(n=new FormData).append("first_name",o),n.append("last_name",l),n.append("date_of_birth",b),n.append("email",v),n.append("password",S),void A()({headers:{"X-Requested-With":"XMLHttpRequest"},url:e,method:"POST",data:n}).then((function(e){var n=e.data.token;t(n)})).catch((function(e){console.log(e)}));var e,n}}," Register "))});var re={};re.Nav=_()("nav",{target:"e10mgfkx0"})({name:"tw5309",styles:"width:100%;padding-left:30px;padding-right:10px;display:flex;justify-content:space-between;align-items:center;"}),re.Ul=_()("ul",{target:"e10mgfkx1"})({name:"n8z9vn",styles:"display:flex;list-style:none;li a{display:inline-block;padding:10px 15px;text-decoration:none;}"});var oe=re,ae=function(e){return Object(B.jsx)(oe.Ul,null,Object(B.jsx)("li",null,Object(B.jsx)(O.Link,{to:"/"},"Home")),Object(B.jsx)("li",null,Object(B.jsx)(O.Link,{to:"/profile"},"Profile")),Object(B.jsx)("li",null,Object(B.jsx)(O.Link,{to:"/",onClick:function(){e.setTokenAction(null)}}," Logout")))};ae.propTypes={setTokenAction:Q.a.func.isRequired};var ie=Object(p.connect)(null,(function(e){return{setTokenAction:function(t){return e(V(t))}}}))(ae),ce=function(){return Object(B.jsx)(oe.Ul,null,Object(B.jsx)("li",null,Object(B.jsx)(O.Link,{to:"/"},"Home")),Object(B.jsx)("li",null,Object(B.jsx)(O.Link,{to:"/login"},"Login")),Object(B.jsx)("li",null,Object(B.jsx)(O.Link,{to:"/register"},"Register")))},se=Object(p.connect)((function(e){return{token:e.reducer.user.token}}),null)((function(e){var t=!!e.token;return Object(B.jsx)(oe.Nav,null,!t&&Object(B.jsx)(ce,null),t&&Object(B.jsx)(ie,null))}));var le={name:"1a6n37v-globalCSS",styles:'body{font:normal 18px/1.5 "Fira Sans","Helvetica Neue",sans-serif;background:#f4f4f4;color:#0e8afc;;label:globalCSS;'},ue={name:"1jidj1q-pageCss",styles:"width:80%;max-width:1200px;margin:0 auto;;label:pageCss;"},pe=function(e){var t=e.route;e.match;return Object(B.jsx)("div",null,Object(B.jsx)(B.Global,{styles:le}),Object(B.jsx)(se,null),Object(B.jsx)("div",{css:ue},Object(u.renderRoutes)(t.routes)))};pe.propTypes={route:Q.a.objectOf(Q.a.any)},pe.defaultProps={route:null};var je=pe,be=function(){var e=Object(O.useRouteMatch)().url;return Object(B.jsx)("div",null,Object(B.jsx)("p",null,Object(B.jsx)(O.Link,{to:e+"/create"}," Host a meeting ")),Object(B.jsx)("p",null,Object(B.jsx)(O.Link,{to:e+"/active"}," Your Meetings ")),Object(B.jsx)("p",null,Object(B.jsx)(O.Link,{to:e+"/template"}," Trending Templates ")))},me=function(e){var t=e.route;return Object(B.jsx)("div",null,Object(u.renderRoutes)(t.routes,{someProp:"these extra props are optional"}))},xe=n(17),de=n.n(xe);function fe(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var Oe=function(e){var t=e.selectedComponents,n=e.componentList,r=e.updateComponentList,o=Object(c.useState)(""),a=J()(o,2),i=a[0],s=a[1],l=Object(c.useState)(""),u=J()(l,2),p=u[0],j=u[1],b=Object(c.useState)({}),m=J()(b,2),x=m[0],d=m[1],f=function(e){var t=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?fe(Object(n),!0).forEach((function(t){de()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):fe(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},n.find((function(t){return e==t.id})));t.agenda_item=i,t.duration=p,d(t)};return Object(B.jsx)(c.Fragment,null,Object(B.jsx)($.ListElement,null,Object(B.jsx)("label",{htmlFor:"meeting-component"},"Meeting Component"),Object(B.jsx)("input",{type:"text",name:"meeting-component",value:i,placeholder:"Name",onChange:function(e){return s(e.target.value)}}),Object(B.jsx)("input",{type:"number",name:"meeting-component-duration",value:p,placeholder:"Duration",onChange:function(e){return j(e.target.value)}}),Object(B.jsx)("select",{onChange:function(e){return f(e.target.value)}},Object(B.jsx)("option",{key:"none",value:null},"Type"),n&&n.map((function(e){return Object(B.jsx)("option",{key:e.type,value:e.id}," ",e.name)}))),Object(B.jsx)($.ButtonElement,{onClick:function(){var e=t.concat([x]);r(e)}}," + ")))},ge=function(e){var t=e.meetingName,n=e.meetingDescription,r=e.componentList,o=e.setMeetingName,a=e.setMeetingDescription,i=(e.setComponent,e.addComponent),s=e.updateComponentList,l=e.selectedComponents;return Object(B.jsx)(c.Fragment,null,Object(B.jsx)($.ListElement,null,Object(B.jsx)("label",{htmlFor:"meeting-name"},"Meeting Name"),Object(B.jsx)("input",{type:"text",name:"meeting-name",value:t,onChange:function(e){return o(e.target.value)}})),Object(B.jsx)($.ListElement,null,Object(B.jsx)("label",{htmlFor:"meeting-description"},"Meeting Description"),Object(B.jsx)("input",{type:"text",name:"meeting-description",value:n,onChange:function(e){return a(e.target.value)}})),r&&Object(B.jsx)(Oe,{updateComponentList:s,componentList:r,addComponent:i,selectedComponents:l}))},he=function(e){var t=e.startDate,n=e.setStartDate,r=e.isPublic,o=e.setPublic,a=e.isRecurring,i=e.setRecurring,s=e.setInterval;return console.log("isPublic ".concat(r)),console.log("isRecurring ".concat(a)),Object(B.jsx)(c.Fragment,null,Object(B.jsx)($.ListElement,null,Object(B.jsx)("label",{htmlFor:"public"},"Public ?"),Object(B.jsx)($.FlexList,null,Object(B.jsx)("li",null,Object(B.jsx)("label",{htmlFor:"yes"}," Yes "),Object(B.jsx)("input",{type:"radio",id:"yes",checked:!0===r,onChange:function(e){return o(!0)}})),Object(B.jsx)("li",null,Object(B.jsx)("label",{htmlFor:"no"}," No "),Object(B.jsx)("input",{type:"radio",id:"no",checked:!1===r,onChange:function(e){return o(!1)}})))),Object(B.jsx)($.ListElement,null,Object(B.jsx)("label",{htmlFor:"date"},"Start Date "),Object(B.jsx)("input",{type:"date",name:"start-date",value:t,onChange:function(e){return n(e.target.value)}})),Object(B.jsx)($.ListElement,null,Object(B.jsx)("label",{htmlFor:"recurring"},"Recurring ?"),Object(B.jsx)($.FlexList,null,Object(B.jsx)("li",null,Object(B.jsx)("label",{htmlFor:"yes"}," Yes "),Object(B.jsx)("input",{type:"radio",id:"yes",checked:!0===a,onChange:function(e){return i(!0)}})),Object(B.jsx)("li",null,Object(B.jsx)("label",{htmlFor:"no"}," No "),Object(B.jsx)("input",{type:"radio",id:"no",checked:!1===a,onChange:function(e){return i(!1)}})))),a&&Object(B.jsx)($.ListElement,null,Object(B.jsx)("label",{htmlFor:"Interval"},"How Often? "),Object(B.jsx)("select",{onChange:function(e){return s(e.target.value)}},Object(B.jsx)("option",{value:"Day"},"Daily"),Object(B.jsx)("option",{value:"Month"},"Monthly"),Object(B.jsx)("option",{value:"Week"},"Weekly"),Object(B.jsx)("option",{value:"Year"},"Yearly"))))},ve=function(e){var t=e.componentList;return Object(B.jsx)(c.Fragment,null,t.map((function(e){return Object(B.jsx)("p",{key:e.customName},"Name: ".concat(e.agenda_item," Duration: ").concat(e.duration," minutes Type: ").concat(e.name))})))};ve.propTypes={componentList:Q.a.array},ve.defaultProps={componentList:[]};var ye=ve,ke=Object(p.connect)((function(e){return{token:e.reducer.user.token}}),null)((function(e){var t=Object(c.useState)(""),n=J()(t,2),r=n[0],a=n[1],s=Object(c.useState)(""),l=J()(s,2),u=l[0],p=l[1],j=Object(c.useState)(!1),b=J()(j,2),m=b[0],x=b[1],d=Object(c.useState)(!1),f=J()(d,2),O=f[0],g=f[1],h=Object(c.useState)(""),v=J()(h,2),y=v[0],k=v[1],w=Object(c.useState)(""),S=J()(w,2),C=S[0],L=S[1],P=Object(c.useState)(null),q=J()(P,2),T=q[0],D=q[1],E=Object(c.useState)([]),M=J()(E,2),F=M[0],R=M[1];Object(c.useEffect)((function(){(function(){var t=i()(o.a.mark((function t(){var n,r,a,i;return o.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=e.token,r="".concat("http://localhost:8000","/meetings/components/"),t.next=4,A()({headers:{"X-Requested-With":"XMLHttpRequest",Authorization:"JWT ".concat(n)},url:r,method:"GET"});case 4:a=t.sent,i=a.data,D(i.components);case 7:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}})()()}),[]);var _=function(){var t=i()(o.a.mark((function t(){var n,a,i,c,s,l;return o.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n="".concat("http://localhost:8000","/meetings/structure/create/"),a=e.token,i=e.history,(c=new FormData).append("name",r),c.append("public",m),c.append("start_date",y),c.append("description",u),c.append("recurring",O),c.append("interval",C),c.append("selected_components",JSON.stringify(F)),t.next=12,A()({headers:{"X-Requested-With":"XMLHttpRequest",Authorization:"JWT ".concat(a)},url:n,method:"POST",data:c});case 12:200===(s=t.sent).status&&(l=s.data.meeting_uuid,i.push("/meeting/preview/".concat(l)));case 14:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}();return Object(B.jsx)(c.Fragment,null,Object(B.jsx)("h2",null," Meeting Creation "),Object(B.jsx)(ge,{componentList:T,selectedComponents:F,meetingName:r,meetingDescription:u,setMeetingName:a,setMeetingDescription:p,updateComponentList:R}),F&&Object(B.jsx)(ye,{componentList:F}),Object(B.jsx)(he,{startDate:y,setPublic:x,isPublic:m,isRecurring:O,setStartDate:k,setRecurring:g,setInterval:L}),Object(B.jsx)($.ButtonElement,{onClick:function(){return _()}}," Create "))})),we=function(){return Object(B.jsx)(c.Fragment,null,Object(B.jsx)("h1",null," Brainstorm Activity "),Object(B.jsx)("textarea",{rows:"4",cols:"50"}),Object(B.jsx)($.ButtonElement,{type:"submit"}," Add Card "))};var Se=_()("div",{target:"e177ilib0",label:"BoxItemStyled"})({name:"162zrb6",styles:"color:black;border-radius:4px;box-shadow:2px 4px #898989;width:100%;height:100%;padding:10px;background-color:#ffff;display:flex;flex-direction:column;p{font-size:12px;}"}),Ce=_()("div",{target:"e177ilib1",label:"ComponentRowStyled"})({name:"1jba0ws",styles:"display:flex;flex-direction:row;justify-content:space-between;p{font-size:12px;}"}),Le=function(e){function t(e){var n;return C()(this,t),(n=T()(this,E()(t).call(this,e))).state={activeMeetingTemplate:null,meetingUUID:null},n}return F()(t,e),P()(t,[{key:"componentDidMount",value:function(){var e=this,t=this.props,n=t.token,r=t.match.params.meetingID;A()({headers:{"X-Requested-With":"XMLHttpRequest",Authorization:"JWT ".concat(n)},url:"http://localhost:8000/meetings/active/preview/",method:"GET",params:{meeting_uuid:r}}).then((function(t){var n=t.data.meeting,r=n.meeting_template;e.setState({activeMeetingTemplate:r,meetingUUID:n.meeting_uuid})})).catch((function(e){console.log(e)}))}},{key:"render",value:function(){var e=this.state,t=e.activeMeetingTemplate,n=e.meetingUUID,r=this.props.history;return Object(B.jsx)(c.Fragment,null,t&&Object(B.jsx)(c.Fragment,null,Object(B.jsx)(Se,null,Object(B.jsx)("h1",null,"Name: ".concat(t.name)),Object(B.jsx)("h2",null,"Description: ".concat(t.description)),t.components.length>0&&t.components.map((function(e){return Object(B.jsx)(Ce,null,Object(B.jsx)("p",null,e.agenda_item),Object(B.jsx)("p",null,e.name),Object(B.jsx)("p",null,e.duration))}))),Object(B.jsx)($.ButtonElement,{onClick:function(){return r.push("/meeting/activity/".concat(n,"/brainstorm/"))}}," Start PreWork ")))}}]),t}(c.Component),Pe=Object(p.connect)((function(e){return{token:e.reducer.user.token}}),null)(Le),qe=[{component:je,routes:[{component:Y,path:"/",exact:!0},{component:te,path:"/login",exact:!0},{component:ne,path:"/register",exact:!0},{component:be,path:"/meeting",exact:!0},{path:"/meeting/:category?/:meetingID?/:meetingActivity?",component:me,routes:[{path:"/meeting/create/",component:ke,exact:!0},{path:"/meeting/active/",component:U,exact:!0},{path:"/meeting/preview/:meetingID/",component:Pe,exact:!0},{path:"/meeting/activity/:meetingID/brainstorm/",component:we}]}]}];n(29);function Te(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function De(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Te(Object(n),!0).forEach((function(t){de()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Te(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Ee={token:null};var Me={reducer:Object(j.combineReducers)({user:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Ee,t=arguments.length>1?arguments[1]:void 0,n=t.type,r=(t.payload,t.value);switch(n){case"SET_TOKEN":return console.log(t),De({},e,{token:r});default:return e}}})},Fe=process.env.PORT||3006,Re=l()();Re.use(l.a.static("public")),Re.use(w.a.express()),Re.use(function(){var e=i()(o.a.mark((function e(t,n,r){var a,i,c,s;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a=new y.NodeCookiesWrapper(new w.a(t,n)),i={key:"root",storage:new y.CookieStorage(a),stateReconciler:function(e,t){return t}},e.prev=2,e.next=5,Object(v.getStoredState)(i);case 5:c=e.sent,e.next=11;break;case 8:e.prev=8,e.t0=e.catch(2),c={};case 11:s=Object(v.persistCombineReducers)(i,Me),t.reduxStore=Object(j.createStore)(s,c,Object(b.composeWithDevTools)(Object(j.applyMiddleware)(x.a))),n.removeHeader("Set-Cookie"),r();case 15:case"end":return e.stop()}}),e,null,[[2,8]])})));return function(t,n,r){return e.apply(this,arguments)}}(),l.a.static("public")),Re.get("*",(function(e,t){var n=Object(u.matchRoutes)(qe,e.path).map((function(e){var t=e.route;return t.loadData?t.loadData(store,id):null})).map((function(e){return e?new Promise((function(t,n){e.then(t).catch(t)})):null}));Promise.all(n).then((function(){var n=f.a.renderToString(Object(B.jsx)(p.Provider,{store:e.reduxStore},Object(B.jsx)(O.StaticRouter,{location:e.path,context:{}},Object(B.jsx)("div",null,Object(u.renderRoutes)(qe)))));return console.log("server stores ".concat(h()(e.reduxStore.getState()))),t.send('<!DOCTYPE html>\n  <head>\n\n      <meta name="viewport" content="width=device-width, initial-scale=1.0"/>\n  </head>\n  <body>\n      <div id="root">'.concat(n,'</div>\n      <script src="/bundle.js"><\/script>\n      <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">\n  </body>\n</html>'))}))})),Re.listen(Fe,(function(){console.log("😎 Server is listening on port ".concat(Fe))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,